ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
yap$VALIDATED <- as.integer(yap$VALIDATED)
View(yap)
sum(yap$VALIDATED)
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
yap$VALIDATED <- as.factor(yap$VALIDATED)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
yap$VALIDATED <- as.factor(yap$VALIDATED)
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
?geom_density
View(yap)
yap_long <- pivot_longer(yap, cols = 1:6, names_to = "variable", values_to = "value")
View(yap_long)
View(train)
######### descriptives ########
yap <- train[,c(1, 8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
######### descriptives ########
yap <- train[,c(1, 8:10, 12:13, 22, 16)] %>% mutate_all(2:7, as.numeric)
rlang::last_trace()
>mutate_all
?
mutate_all
######### descriptives ########
yap <- train[,c(1, 8:10, 12:13, 22, 16)] %>% mutate(2:7, as.numeric)
yap$id <- train$PMHC
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
yap$VALIDATED <- as.factor(yap$VALIDATED)
yap$id <- train$PMHC
yap_long <- pivot_longer(yap, cols = 1:6, names_to = "variable", values_to = "value")
View(yap_long)
ggplot(data_long, aes(x = value, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
ggplot(yap_long, aes(x = value, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
yap[1:6] <- scale(yap[1:6])
View(yap)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
yap$VALIDATED <- as.factor(yap$VALIDATED)
yap$id <- train$PMHC
yap[1:6] <- scale(yap[1:6])
yap_long <- pivot_longer(yap, cols = 1:6, names_to = "variable", values_to = "value")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(0,2)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(-1,2)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(-2,2)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(-2,4)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
#xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::load_all()
plotMatrix(cor(yap[,1:6]), "~/Dropbox/2024_05_Antibody/cor.tiff")
yap[,1:6]
View(yap)
?
cor
plotMatrix(cor(yap[,1:6], use = "pairwise.complete.obs"), "~/Dropbox/2024_05_Antibody/cor.tiff")
View(yap)
plotMatrix(cor(yap[,1:6], use = "pairwise.complete.obs"), "~/Dropbox/2024_05_Antibody/cor.tiff", palette = "jet")
names(yap)
ggplot(yap, aes(x = AGRETOPICITY, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point()
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point() +
theme_bw()
X <- yap[,1:6]
# Group labels (only used to guide the LDA)
group <- yap$VALIDATED
lda_model <- MASS::lda(X, grouping = group)
yap_wona <- yap %>% drop_na()
X <- yap_wona[,1:6]
# Group labels (only used to guide the LDA)
group <- yap_wona$VALIDATED
lda_model <- MASS::lda(X, grouping = group)
lda_values <- predict(lda_model)
X_lda <- lda_values$x
clusters <- kmeans(X_lda, centers = 2)
data$cluster <- as.factor(clusters$cluster)
yap_wona$cluster <- as.factor(clusters$cluster)
# Plot the results
library(ggplot2)
ggplot(data, aes(X1, X2, color = cluster)) +
geom_point(alpha = 0.5) +
labs(title = "Cluster Plot in Original Space", x = "X1", y = "X2")
ggplot(yap_wona, aes(X1, X2, color = cluster)) +
geom_point(alpha = 0.5) +
labs(title = "Cluster Plot in Original Space", x = "X1", y = "X2")
View(yap_wona)
max_clusters <- 10
wss <- numeric(max_clusters)
for (k in 1:max_clusters) {
set.seed(123)  # for reproducibility
model <- kmeans(X_lda, centers = k, nstart = 25)
wss[k] <- model$tot.withinss
}
ggplot(data = data.frame(Clusters = 1:max_clusters, WSS = wss), aes(x = Clusters, y = WSS)) +
geom_line() +
geom_point() +
ggtitle("Elbow Method for Determining Optimal Number of Clusters") +
xlab("Number of Clusters (k)") +
ylab("Total Within-Cluster Sum of Squares (WSS)") +
theme_minimal()
clusters <- kmeans(X_lda, centers = 5)
yap_wona$cluster <- as.factor(clusters$cluster)
View(yap_wona)
ggplot(yap_wona, aes(TUMOR_ABUNDANCE, BINDING_STABILITY, color = cluster)) +
geom_point(alpha = 0.5) +
labs(title = "Cluster Plot in Original Space", x = "X1", y = "X2")
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_bw()
names(yap)
ggplot(yap, aes(x = FOREIGNNESS, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = FOREIGNNESS, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = BINDING_STABILITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
plotMatrix(cor(yap[,1:6], use = "pairwise.complete.obs"), "~/Dropbox/2024_05_Antibody/cor.tiff", palette = "jet")
names(yap[,1:6])
?param_tuning_sigmau
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = Binding_Affinity_netMHCpan4.1b, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = Binding_Affinity_netMHCpan4.1b, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, ..scaled..) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(..scaled..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(after_stat(scaled))) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(..scaled..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(..scaled..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = ..density..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = stat_density())) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = after_stat())) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = after_stat(scale))) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = ..density..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, y = ..density..fill = VALIDATED, color = VALIDATED)) +
ggplot(yap_long, aes(x = value, y = ..density.., fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
names(yap)
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point() +
theme_bw()
## recompile the package & reinstall
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
devtools::build()
setwd("~/Dropbox/2024_03_SCFA_package")
devtools::install("SCFA")
library(SCFA)
library(microbenchmark)
library(data.table)
# simulated data
data(sim)
data <- sim
matrix <- cor(data)
matrix <- matrix - diag(diag(matrix))
plotMatrix(data = matrix, filepath = "~/Dropbox/2024_03_SCFA_package/sim.tiff")
prctile_vec = seq(94, 99, by = 0.5)
lam_vec = seq(0.4, 0.8, length.out = 5)
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
results <- greedy(matrix, res$cut_out, res$lambda_out)
results <- dense(matrix, res$cut_out, res$lambda_out)
subnetwork_visualize(results$W_DSD_greedy)
plotMatrix(results$W_DSD_greedy, "~/Dropbox/2024_03_SCFA_package/sim_dense.tiff")
plotMatrix(results$W_dense, "~/Dropbox/2024_03_SCFA_package/sim_dense.tiff")
results$CID
# luana gene expression data
wp <- fread("~/Dropbox/2024_04_Luana_gene_expression/Results/cormx.csv")
wp <- as.matrix(wp[,-1])
wp <- wp - diag(diag(wp))
data <- fread("~/Dropbox/2024_04_Luana_gene_expression/Results/train_DEexp.csv")
data <- data[,-1]
##### real data ######
wp <- fread("~/Dropbox/2024_04_Luana_gene_expression/Results/cormx.csv")
wp <- as.matrix(wp[,-1])
wp <- wp - diag(diag(wp))
data <- fread("~/Dropbox/2024_04_Luana_gene_expression/Results/train_DEexp.csv")
data <- data[,-1]
runtime <- microbenchmark(
results <- dense(wp, 0.5, 0.4),
times = 1
)
runtime
plotMatrix(data = results$W_dense)
results$CID
remove.packages("SCFA")
setwd("~/Dropbox/2024_03_SCFA_package")
devtools::install("SCFA")
devtools::document()
## recompile the package & reinstall
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
## recompile the package & reinstall
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
## recompile the package & reinstall
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
setwd("~/Dropbox/2024_03_SCFA_package")
devtools::install("SCFA")
library(SCFA)
library(microbenchmark)
library(data.table)
# simulated data
data(sim)
data <- sim
matrix <- cor(data)
matrix <- matrix - diag(diag(matrix))
plotMatrix(data = matrix, filepath = "~/Dropbox/2024_03_SCFA_package/sim.tiff")
prctile_vec = seq(94, 99, by = 0.5)
lam_vec = seq(0.4, 0.8, length.out = 5)
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
results <- dense(matrix, res$cut_out, res$lambda_out)
plotMatrix(results$W_dense, "~/Dropbox/2024_03_SCFA_package/sim_dense.tiff")
?scfa
?get_sigmau
??scfa
## recompile the package & reinstall
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
devtools::build()
remove.packages("SCFA")
setwd("~/Dropbox/2024_03_SCFA_package")
devtools::install("SCFA")
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
devtools::load_all()
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
prctile_vec = seq(94, 99, by = 0.5)
lam_vec = seq(0.4, 0.8, length.out = 5)
# res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
# results <- greedy(matrix, res$cut_out, res$lambda_out)
results <- dense(matrix, 0.3, 0.5)
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
W_original = matrix
threshold = res$cut_out
lambda = res$lambda_out
results <- dense(W_original = matrix, threshold = res$cut_out, lambda = res$lambda_out)
plotMatrix(results$W_dense, filepath = "~/Dropbox/2024_03_SCFA_package/sim_dense.tiff", format = "tiff", palette = "jet")
?scfa
fa <- scfa(data, results$CID, results$Clist)
fa$loading
a <- fa$factorscore
a <- fa$loading
b <- fa$factorscore
View(b)
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
devtools::check()
# update version and track changes in NEWS.md
usethis::use_version()
# build package into zip files
devtools::build()
remove.packages("SCFA")
devtools::install_github("xavienzo/SCFA")
library(SCFA)
data(sim)
data <- sim
matrix <- cor(data)
#matrix <- matrix - diag(diag(matrix))
plotMatrix(data = matrix, filepath = "../sim.tiff", format = "tiff", palette = "jet")
prctile_vec = seq(94, 99, by = 0.5)
lam_vec = seq(0.4, 0.8, length.out = 5)
# res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
# results <- greedy(matrix, res$cut_out, res$lambda_out)
results <- dense(matrix, 0.3, 0.5)
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
W_original = matrix
threshold = res$cut_out
lambda = res$lambda_out
results <- dense(W_original = matrix, threshold = res$cut_out, lambda = res$lambda_out)
plotMatrix(results$W_dense, filepath = "~/Dropbox/2024_03_SCFA_package/sim_dense.tiff", format = "tiff", palette = "jet")
results$CID
fa <- scfa(data, results$CID, results$Clist)
a <- fa$loading
b <- fa$factorscore
?dense
?greedy_peeling
res <- param_tuning_sigmau(matrix, data, prctile_vec, lam_vec)
threshold = res$cut_out
lambda = res$lambda_out
?plotMatrix
?param_tuning_sigmau
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::document()
devtools::check()
# update version and track changes in NEWS.md
usethis::use_version()
# build package into zip files
devtools::build()
devtools::document()
devtools::check()
# build package into zip files
devtools::build()
