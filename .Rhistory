get_table(model1_z)
get_table <- function(model){
conc_stat <- summary(model)$conc[1]
conc_se <- summary(model)$conc[2]
lrt_stat <- summary(model)$logtest[1]
lrt_p <- summary(model)$logtest[3]
tb1 <- tbl_regression(model, exp = TRUE) %>%
as_gt() %>%
gt::tab_footnote(
footnote = paste0("Concordance Index: ", format(conc_stat, digits = 2), "(SE: ", format(conc_se, digits = 2), ") ",
"Likelihood ratio test: ", format(lrt_stat, digits = 2), "(p = ", format(lrt_p, digits = 4), ")")
) %>%
gt::gtsave(filename = paste0("~/Dropbox/2024_03_Peter_survival/", names(which(sapply(.GlobalEnv, identical, y = model)))[1], ".docx"))
}
get_table(model1_z)
get_table <- function(model){
conc_stat <- summary(model)$conc[1]
conc_se <- summary(model)$conc[2]
lrt_stat <- summary(model)$logtest[1]
lrt_p <- summary(model)$logtest[3]
tb1 <- tbl_regression(model, exp = TRUE) %>%
as_gt() %>%
gt::tab_footnote(
footnote = paste0("Concordance Index: ", format(conc_stat, digits = 2), " (SE: ", format(conc_se, digits = 2), ") ",
"Likelihood ratio test: ", format(lrt_stat, digits = 2), " (p = ", format(lrt_p, digits = 4), ")")
) %>%
gt::gtsave(filename = paste0("~/Dropbox/2024_03_Peter_survival/", names(which(sapply(.GlobalEnv, identical, y = model)))[1], ".docx"))
}
get_table(model1_z)
get_table(model1_z)
get_table(model2_z)
get_table(model3_z)
get_table(model4_z)
get_table(model5_z)
fa <- read.csv("~/Dropbox/ABCD_QC/data/mri_y_dti_fa_fs_at.csv")
View(fa)
View(fa)
model6_z <- coxph(Surv(Conversion_time_from_baseline, mci_ad) ~ fcvrs_z, data = data_filled_mci_ad_fscore)
get_table(model6_z)
model7 <- coxph(Surv(Conversion_time_from_baseline, mci_ad) ~ F_score, data = data_filled_mci_ad_fscore)
get_table(model7)
model7_z <- coxph(Surv(Conversion_time_from_baseline, mci_ad) ~ APOE4_z + fcvrs_z, data = data_filled_mci_ad_fscore)
get_table(model7_z)
##########################
########### FA ###########
##########################
# read data: scanner info, site info, fa measures, data dictionary
scanner <- read.csv("~/Dropbox/Schizophrenia/ABCD/mri_y_adm_info.csv")
site <- read.csv("~/Dropbox/ABCD_QC/data/abcd_y_lt.csv")
scanner <- left_join(scanner, site, c("src_subject_id", "eventname")) %>%
dplyr::select(1,2,4,10,16)
dic <- read.csv("~/Dropbox/Schizophrenia/ABCD/mri_y_dti_fa_fs_at_ABCD Data Dictionary_v2.csv")
fa <- read.csv("~/Dropbox/ABCD_QC/data/mri_y_dti_fa_fs_at.csv")
data <- left_join(fa, scanner, c("src_subject_id", "eventname"))
data$age <- data$interview_age/12
length(unique(data$src_subject_id))
baseline_age <- data %>% filter(eventname == "baseline_year_1_arm_1")
mean(baseline_age$age)
sd(baseline_age$age)
sex <- read.csv("~/Dropbox/ABCD_QC/data/abcd_p_demo.csv") %>% dplyr::select(1,9) %>% drop_na() %>% distinct(src_subject_id, .keep_all = T)
# demo <- read.csv("~/Dropbox/ABCD_QC/data/abcd_p_demo.csv")
# length(unique(demo$src_subject_id))
# length(demo$src_subject_id[demo$eventname == "baseline_year_1_arm_1"])
fa1 <- data
fa1$MeanValue = rowMeans(fa1[, 3:44])
#####################
#####################
# exclude subjects that had only 1 visit and went to diff sites, 18144 left
diffsite <- scanner %>%
group_by(src_subject_id) %>%
filter(n_distinct(site_id_l) != 1)
length(unique(diffsite$src_subject_id)) #97
blonly <- scanner %>%
group_by(src_subject_id) %>%
filter(n() == 1)
length(unique(blonly$src_subject_id)) #3360
sc_samesite <- scanner %>%
group_by(src_subject_id) %>%
filter(n_distinct(site_id_l) == 1 & n() > 1) %>%
ungroup() %>%
drop_na()
length(unique(sc_samesite$src_subject_id)) #8363
visitcount <- sc_samesite %>%
group_by(src_subject_id) %>%
summarise(n = n())
table(visitcount$n)
data_samesite <- data %>%
group_by(src_subject_id) %>%
filter(n_distinct(site_id_l) == 1 & n() > 1) %>%
ungroup() %>%
drop_na()
data_samesite %>%
left_join(sex, c("src_subject_id")) %>%
distinct(src_subject_id, .keep_all = T) %>%
group_by(demo_sex_v2) %>%
summarise(n = n())
baseline_age_samesite <- data_samesite %>% filter(eventname == "baseline_year_1_arm_1")
mean(baseline_age_samesite$age)
sd(baseline_age_samesite$age)
length(unique(data_samesite$src_subject_id))
fa1 %>% distinct(src_subject_id, .keep_all = T) %>% group_by(demo_sex_v2) %>% summarise(n = n())
# find what scanners each site used
unique_site_scanner_table <- data_samesite %>%
group_by(site_id_l) %>%
summarise(scanners_used = paste(unique(mri_info_manufacturer), collapse = ', ')) %>%
ungroup()
subjects <- data_samesite %>%
left_join(unique_site_scanner_table, "site_id_l") %>%
group_by(site_id_l, mri_info_manufacturer) %>% summarise(n = n_distinct(src_subject_id))
subjects <- scanner %>%
left_join(unique_site_scanner_table, "site_id_l") %>%
group_by(site_id_l, mri_info_manufacturer) %>% summarise(n = n_distinct(src_subject_id))
unique_site_scanner_table$scanners_used_singular <- unique_site_scanner_table$scanners_used
unique_site_scanner_table$scanners_used_singular[2] <- "SIEMENS"
unique_site_scanner_table$scanners_used_singular[8] <- "GE MEDICAL SYSTEMS"
unique_site_scanner_table$scanners_used_singular[21] <- "SIEMENS"
unique_scanner <- unique_site_scanner_table[,c(1,3)]
output_names <- c("Tract", "Site", "ICC", "convergeIter")
output <- data.frame(matrix(NA, nrow = 42*21, ncol = 4))
names(output) <- output_names
site_names <- unique(data_samesite$site_id_l)
sites <- rep(site_names, 42)
output[,2] <- sites
tract_names <- names(data_samesite)[3:44]
tract <- rep(dic$LongFiberName[dic$var_name == tract_names], each = length(site_names))
output[,1] <- tract
train <- read_xlsx("/Users/biostat05/Dropbox/2024_05_Antibody/File_06132024/Dataset_RQ_MD_240613.xlsx",
sheet = 2)
library(readxl)
library(xgboost)
library(tidyverse)
library(readxl)
library(ROCR)
train <- read_xlsx("/Users/biostat05/Dropbox/2024_05_Antibody/File_06132024/Dataset_RQ_MD_240613.xlsx",
sheet = 2)
install.packages("readxl")
library(readxl)
train <- read_xlsx("/Users/biostat05/Dropbox/2024_05_Antibody/File_06132024/Dataset_RQ_MD_240613.xlsx",
sheet = 2)
train <- read_xlsx("~/Dropbox/2024_05_Antibody/File_06132024/Dataset_RQ_MD_240613.xlsx",
sheet = 2)
test <- read_xlsx("~/Dropbox/2024_05_Antibody/File_06132024/Dataset_RQ_MD_240613.xlsx",
sheet = 3)
names(test)[7] <- "NETMHC_PAN_BINDING_AFFINITY"
train_y <- ifelse(train$VALIDATED, 1, 0)
test_y <- test$VALIDATED
train_x <- train[,c(8:10, 12:13)] #NETMHC_PAN_BINDING_AFFINITY
######### descriptives ########
X <- train[,c(8:10, 12:13, 22)]
View(X)
View(train)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)]
View(yap)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
library(tidyverse)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
View(yap)
yap <- train[,c(8:10, 12:13, 22, 16)]
View(yap)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
library(ggplot2)
names(yap)
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
yap$VALIDATED <- as.integer(yap$VALIDATED)
View(yap)
sum(yap$VALIDATED)
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
yap$VALIDATED <- as.factor(yap$VALIDATED)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
yap$VALIDATED <- as.factor(yap$VALIDATED)
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
?geom_density
View(yap)
yap_long <- pivot_longer(yap, cols = 1:6, names_to = "variable", values_to = "value")
View(yap_long)
View(train)
######### descriptives ########
yap <- train[,c(1, 8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
######### descriptives ########
yap <- train[,c(1, 8:10, 12:13, 22, 16)] %>% mutate_all(2:7, as.numeric)
rlang::last_trace()
>mutate_all
?
mutate_all
######### descriptives ########
yap <- train[,c(1, 8:10, 12:13, 22, 16)] %>% mutate(2:7, as.numeric)
yap$id <- train$PMHC
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
yap$VALIDATED <- as.factor(yap$VALIDATED)
yap$id <- train$PMHC
yap_long <- pivot_longer(yap, cols = 1:6, names_to = "variable", values_to = "value")
View(yap_long)
ggplot(data_long, aes(x = value, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
ggplot(yap_long, aes(x = value, fill = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
yap[1:6] <- scale(yap[1:6])
View(yap)
######### descriptives ########
yap <- train[,c(8:10, 12:13, 22, 16)] %>% mutate_all(as.numeric)
yap$VALIDATED <- as.factor(yap$VALIDATED)
yap$id <- train$PMHC
yap[1:6] <- scale(yap[1:6])
yap_long <- pivot_longer(yap, cols = 1:6, names_to = "variable", values_to = "value")
ggplot(yap, aes(x = NETMHC_PAN_BINDING_AFFINITY, group = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot", x = "Variable", y = "Density")
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(0,2)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(-1,2)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(-2,2)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_minimal() +
xlim(-2,4)
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
#xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
######## create new version
# package doc ref: https://combine-australia.github.io/r-pkg-dev/building-installing-and-releasing.html
# r object ref: https://adv-r.hadley.nz/oo.html
# s3 object ref: https://arxiv.org/abs/1608.07161
#
setwd("~/Dropbox/2024_03_SCFA_package/SCFA")
devtools::load_all()
plotMatrix(cor(yap[,1:6]), "~/Dropbox/2024_05_Antibody/cor.tiff")
yap[,1:6]
View(yap)
?
cor
plotMatrix(cor(yap[,1:6], use = "pairwise.complete.obs"), "~/Dropbox/2024_05_Antibody/cor.tiff")
View(yap)
plotMatrix(cor(yap[,1:6], use = "pairwise.complete.obs"), "~/Dropbox/2024_05_Antibody/cor.tiff", palette = "jet")
names(yap)
ggplot(yap, aes(x = AGRETOPICITY, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point()
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point() +
theme_bw()
X <- yap[,1:6]
# Group labels (only used to guide the LDA)
group <- yap$VALIDATED
lda_model <- MASS::lda(X, grouping = group)
yap_wona <- yap %>% drop_na()
X <- yap_wona[,1:6]
# Group labels (only used to guide the LDA)
group <- yap_wona$VALIDATED
lda_model <- MASS::lda(X, grouping = group)
lda_values <- predict(lda_model)
X_lda <- lda_values$x
clusters <- kmeans(X_lda, centers = 2)
data$cluster <- as.factor(clusters$cluster)
yap_wona$cluster <- as.factor(clusters$cluster)
# Plot the results
library(ggplot2)
ggplot(data, aes(X1, X2, color = cluster)) +
geom_point(alpha = 0.5) +
labs(title = "Cluster Plot in Original Space", x = "X1", y = "X2")
ggplot(yap_wona, aes(X1, X2, color = cluster)) +
geom_point(alpha = 0.5) +
labs(title = "Cluster Plot in Original Space", x = "X1", y = "X2")
View(yap_wona)
max_clusters <- 10
wss <- numeric(max_clusters)
for (k in 1:max_clusters) {
set.seed(123)  # for reproducibility
model <- kmeans(X_lda, centers = k, nstart = 25)
wss[k] <- model$tot.withinss
}
ggplot(data = data.frame(Clusters = 1:max_clusters, WSS = wss), aes(x = Clusters, y = WSS)) +
geom_line() +
geom_point() +
ggtitle("Elbow Method for Determining Optimal Number of Clusters") +
xlab("Number of Clusters (k)") +
ylab("Total Within-Cluster Sum of Squares (WSS)") +
theme_minimal()
clusters <- kmeans(X_lda, centers = 5)
yap_wona$cluster <- as.factor(clusters$cluster)
View(yap_wona)
ggplot(yap_wona, aes(TUMOR_ABUNDANCE, BINDING_STABILITY, color = cluster)) +
geom_point(alpha = 0.5) +
labs(title = "Cluster Plot in Original Space", x = "X1", y = "X2")
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_bw()
names(yap)
ggplot(yap, aes(x = FOREIGNNESS, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = FOREIGNNESS, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = BINDING_STABILITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
plotMatrix(cor(yap[,1:6], use = "pairwise.complete.obs"), "~/Dropbox/2024_05_Antibody/cor.tiff", palette = "jet")
names(yap[,1:6])
?param_tuning_sigmau
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Variables", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = Binding_Affinity_netMHCpan4.1b, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
xlim(-2,4) +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = Binding_Affinity_netMHCpan4.1b, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, ..scaled..) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(..scaled..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(after_stat(scaled))) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(..scaled..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(..scaled..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap, aes(x = AGRETOPICITY, y = TUMOR_ABUNDANCE, color = VALIDATED)) +
geom_point() +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = ..density..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = stat_density())) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = after_stat())) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = after_stat(scale))) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5, aes(y = ..density..)) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
ggplot(yap_long, aes(x = value, y = ..density..fill = VALIDATED, color = VALIDATED)) +
ggplot(yap_long, aes(x = value, y = ..density.., fill = VALIDATED, color = VALIDATED)) +
geom_density(alpha = 0.5) +
facet_wrap(~ variable, scales = "free") +  # Free scales as the ranges might differ
labs(title = "Density Plots for Normalized Predictors", x = "Value", y = "Density") +
theme_bw()
names(yap)
ggplot(yap, aes(x = TUMOR_ABUNDANCE, y = BINDING_STABILITY, color = VALIDATED)) +
geom_point() +
theme_bw()
